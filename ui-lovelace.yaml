button_card_templates:
  !include_dir_merge_named button_card_templates

views:
  - type: custom:grid-layout
    title: Home
    layout:
      #default
      margin: 0
      grid-gap: var(--custom-layout-card-padding)
      grid-template-columns: repeat(4, 1fr) 0
      grid-template-rows: 0 repeat(2, fit-content(100%)) 0fr
      grid-template-areas: |
        "sidebar  .           .       .       ."
        "sidebar  vardagsrum  studio  sovrum  ."
        "sidebar  media       övrigt  hemma   ."
        "sidebar  footer      footer  footer  ."
      mediaquery:
        #phone
        "(max-width: 800px)":
          grid-gap: calc(var(--custom-layout-card-padding) * 0.7) #1.7
          grid-template-columns: 0 repeat(2, 1fr) 0
          grid-template-rows: 0 repeat(5, fit-content(100%)) 0fr
          grid-template-areas: |
            ".  .           .        ."
            ".  sidebar     sidebar  ."
            ".  vardagsrum  sovrum   ."
            ".  studio      övrigt   ."
            ".  media       hemma    ."
            ".  footer      footer   ."
            ".  .           .        ."
        #portrait
        "(max-width: 1200px)":
          grid-gap: var(--custom-layout-card-padding)
          grid-template-columns: repeat(3, 1fr) 0
          grid-template-rows: 0 repeat(3, fit-content(100%)) 0fr
          grid-template-areas: |
            "sidebar  .           .       ."
            "sidebar  vardagsrum  sovrum  ."
            "sidebar  studio      övrigt  ."
            "sidebar  media       hemma   ."
            "sidebar  footer      footer  ."
            "sidebar  .           .       ."
    cards:

      #extra_styles fix, do not remove
      #also warn if theme is not set

      - type: custom:button-card
        view_layout:
          grid-area: 1 / 2 / 2 / 5
        name: SET THEME TO "tablet" IN PROFILE
        tap_action:
          action: navigate
          navigation_path: /profile
        styles:
          card:
            - display: >
                [[[
                  return hass.themes.theme === 'tablet'
                      ? 'none'
                      : 'initial';
                ]]]
          name:
            - z-index: 1
            - overflow: visible
            - color: red
            - font-weight: bolder
            - font-size: xxx-large
            - background: yellow

      #################################################
      #                                               #
      #                    SIDEBAR                    #
      #                                               #
      #################################################

      - type: vertical-stack
        view_layout:
          grid-area: sidebar
        cards:

          - type: custom:button-card
            entity: sensor.template_sidebar
            template: sidebar

          # - type: conditional
          #   conditions:
          #     - entity: input_boolean.laundry_display
          #       state: 'on'
          #   card:
          #     type: custom:button-card
          #     entity: timer.laundry
          #     double_tap_action:
          #       action: call-service
          #       service: input_boolean.turn_off
          #       service_data:
          #         entity_id: input_boolean.laundry_display
          #     template: laundry

          # - type: custom:button-card
          #   entity: sensor.template_sidebar_uptime
          #   template: up_time

      #################################################
      #                 LIVING   ROOM                 #
      #                  VARDAGSRUM                   #
      #                                               #
      #################################################

      - type: grid
        title: Living room
        view_layout:
          grid-area: vardagsrum
        columns: 2
        cards:
          - type: custom:button-card
            entity: light.dinning
            name: Table
            template:
              - light
              #- icon_pendant
              - icon_ceiling_dining
              #- icon_hue
              #- icon_recessed
              #- icon_chandelier

          - type: custom:button-card
            entity: light.mushroom
            name: Ambient
            template:
              - light
              - icon_shade

          - type: custom:button-card
            entity: media_player.samsung_55
            name: TV
            # state_display: >
            #   [[[
            #     if (variables.state === 'playing') {
            #         return 'ON';
            #     }
            #     if (variables.state === true) {
            #         return variables.translate_unknown;
            #     }
            #   ]]]
#            double_tap_action: !include popup/vardagsrum_tv_matt.yaml #popup/living_room_tv.yaml
            template:
              #- base
              - media
              - samsung_tv
              # - media_volume
              - icon_tv
              #- loader

          - type: custom:button-card
            entity: light.couch
            name: Couch
            template:
              - light
              - icon_hue




      #################################################
      #                                               #
      #                    CLIMATE                    #
      #                                               #
      #################################################

#       - type: grid
#         title: Climate
#         view_layout:
#           grid-area: climate
#         columns: 2
#         cards:

#           # - type: custom:button-card
#           #   entity: climate.sensibo
#           #   name: AC
#           #   tap_action:
#           #     !include popup/climate.yaml
#           #   hold_action:
#           #     !include popup/climate.yaml
#           #   triggers_update:
#           #     - binary_sensor.kaiteki_6600_filter_clean_required
#           #   template:
#           #     - base
#           #     - icon_climate
#           #     - climate
#           #   variables:
#           #     circle_input: >
#           #       [[[
#           #         if (states['sensor.temperature_average_upstairs'].state) {
#           #           return (states['sensor.temperature_average_upstairs'].state);
#           #         }
#           #       ]]]

#           # - type: custom:button-card
#           #   entity: cover.gardin_1
#           #   name: Blinds
#           #   template:
#           #     - blinds
#           #     - icon_blinds

# ####  TEMPERATURE SENSOR CARD DOOR ####
#           - type: custom:button-card
#             entity: sensor.samjin_multi_temperature
#             name: Door
#             tap_action: none
#             state_display: >
#               [[[ return '&nbsp;'; ]]]
#             template:
#               - base
#               - circle
#               #- icon_climate
#               - icon_contact_sensor
#             custom_fields:
#               circle: >
#                 [[[
#                   if (entity) {
#                     return `
#                       <svg viewBox="0 0 50 50">
#                         <circle cx="25" cy="25" r="20.5" stroke="none" stroke-width="1.5" fill="rgba(255,255,255,0.04)" />
#                         <text x="50%" y="54%" fill="#8d8e90" font-size="14" text-anchor="middle" alignment-baseline="middle" dominant-baseline="middle">${parseInt(entity.state)}<tspan font-size="10">°C</tspan></text>
#                       </svg>
#                     `;
#                   }
#                 ]]]
#               graph:
#                 card:
#                   type: sensor
#                   entity: >
#                     [[[ return entity.entity_id; ]]]
#                   graph: line
#                   card_mod:
#                     style: |
#                       .header, .value, .measurement {
#                         display: none !important;
#                       }
#               push_graph: >
#                 [[[
#                   setTimeout(() => {
#                     let elt = this.shadowRoot,
#                       card = elt.getElementById('card'),
#                       container = elt.getElementById('container'),
#                       graph = elt.getElementById('graph');
#                     if (elt && card && container && graph) {
#                       card.insertBefore(graph, container);
#                     }
#                   }, 0);
#                   return null;
#                 ]]]
#             styles:
#               custom_fields:
#                 graph:
#                   - position: absolute
#                   - width: 100%
#                   - height: 100%
#                   - clip-path: inset(0 round var(--custom-button-card-border-radius))
#                   - left: 0
#                   - bottom: 0

# ####  TEMPERATURE SENSOR CARD HALLWAY ####
#           - type: custom:button-card
#             entity: sensor.hallway_motion_sensor_temperature
#             name: Hallway
#             tap_action: none
#             state_display: >
#               [[[ return '&nbsp;'; ]]]
#             template:
#               - base
#               - circle
#               - icon_climate
#             custom_fields:
#               icon: >
#                 <ha-icon icon="mdi:thermometer" style="color: #9da0a2;"></ha-icon>
#               circle: >
#                 [[[
#                   if (entity) {
#                     return `
#                       <svg viewBox="0 0 50 50">
#                         <circle cx="25" cy="25" r="20.5" stroke="none" stroke-width="1.5" fill="rgba(255,255,255,0.04)" />
#                         <text x="50%" y="54%" fill="#8d8e90" font-size="14" text-anchor="middle" alignment-baseline="middle" dominant-baseline="middle">${parseInt(entity.state)}<tspan font-size="10">°C</tspan></text>
#                       </svg>
#                     `;
#                   }
#                 ]]]
#               graph:
#                 card:
#                   type: sensor
#                   entity: >
#                     [[[ return entity.entity_id; ]]]
#                   graph: line
#                   card_mod:
#                     style: |
#                       .header, .value, .measurement {
#                         display: none !important;
#                       }
#               push_graph: >
#                 [[[
#                   setTimeout(() => {
#                     let elt = this.shadowRoot,
#                       card = elt.getElementById('card'),
#                       container = elt.getElementById('container'),
#                       graph = elt.getElementById('graph');
#                     if (elt && card && container && graph) {
#                       card.insertBefore(graph, container);
#                     }
#                   }, 0);
#                   return null;
#                 ]]]
#             styles:
#               custom_fields:
#                 graph:
#                   - position: absolute
#                   - width: 100%
#                   - height: 100%
#                   - clip-path: inset(0 round var(--custom-button-card-border-radius))
#                   - left: 0
#                   - bottom: 0




# ###  TEMPERATURE SENSOR CARD BEDROOM 2 ####
#           - type: custom:button-card
#             entity: sensor.bedroom_temperature
#             name: Bedroom Temp
#             tap_action: none
#             state_display: >
#               [[[ return '&nbsp;'; ]]]
#             template:
#               - base
#               - circle
#               - icon_climate
#               #- icon_contact_sensor
#             custom_fields:
#               circle: >
#                 [[[
#                   if (entity) {
#                     return `
#                       <svg viewBox="0 0 50 50">
#                         <circle cx="25" cy="25" r="20.5" stroke="none" stroke-width="1.5" fill="rgba(255,255,255,0.04)" />
#                         <text x="50%" y="54%" fill="#8d8e90" font-size="14" text-anchor="middle" alignment-baseline="middle" dominant-baseline="middle">${parseInt(entity.state)}<tspan font-size="10">°C</tspan></text>
#                       </svg>
#                     `;
#                   }
#                 ]]]
#               graph:
#                 card:
#                   type: sensor
#                   entity: >
#                     [[[ return entity.entity_id; ]]]
#                   graph: line
#                   card_mod:
#                     style: |
#                       .header, .value, .measurement {
#                         display: none !important;
#                       }
#               push_graph: >
#                 [[[
#                   setTimeout(() => {
#                     let elt = this.shadowRoot,
#                       card = elt.getElementById('card'),
#                       container = elt.getElementById('container'),
#                       graph = elt.getElementById('graph');
#                     if (elt && card && container && graph) {
#                       card.insertBefore(graph, container);
#                     }
#                   }, 0);
#                   return null;
#                 ]]]
#             styles:
#               custom_fields:
#                 graph:
#                   - position: absolute
#                   - width: 100%
#                   - height: 100%
#                   - clip-path: inset(0 round var(--custom-button-card-border-radius))
#                   - left: 0
#                   - bottom: 0




# ####  TEMPERATURE SENSOR CARD BEDROOM HUMIDITY ####
#           - type: custom:button-card
#             entity: sensor.bedroom_humidity
#             name: Bedroom Humidity
#             tap_action: none
#             state_display: >
#               [[[ return '&nbsp;'; ]]]
#             template:
#               - base
#               - circle
#               - icon_plex_service
#               #- icon_temp
#               #- icon_washer
#               #- icon_contact_sensor
#               #- icon_humidifier  ## THIS DOES NOT WORK FOR SOME REASON
#             custom_fields:
#               circle: >
#                 [[[
#                   if (entity) {
#                     return `
#                       <svg viewBox="0 0 50 50">
#                         <circle cx="25" cy="25" r="20.5" stroke="none" stroke-width="1.5" fill="rgba(255,255,255,0.04)" />
#                         <text x="50%" y="54%" fill="#8d8e90" font-size="14" text-anchor="middle" alignment-baseline="middle" dominant-baseline="middle">${parseInt(entity.state)}<tspan font-size="10">%</tspan></text>
#                       </svg>
#                     `;
#                   }
#                 ]]]
#               graph:
#                 card:
#                   type: sensor
#                   entity: >
#                     [[[ return entity.entity_id; ]]]
#                   graph: line
#                   card_mod:
#                     style: |
#                       .header, .value, .measurement {
#                         display: none !important;
#                       }
#               push_graph: >
#                 [[[
#                   setTimeout(() => {
#                     let elt = this.shadowRoot,
#                       card = elt.getElementById('card'),
#                       container = elt.getElementById('container'),
#                       graph = elt.getElementById('graph');
#                     if (elt && card && container && graph) {
#                       card.insertBefore(graph, container);
#                     }
#                   }, 0);
#                   return null;
#                 ]]]
#             styles:
#               custom_fields:
#                 graph:
#                   - position: absolute
#                   - width: 100%
#                   - height: 100%
#                   - clip-path: inset(0 round var(--custom-button-card-border-radius))
#                   - left: 0
#                   - bottom: 0




      #################################################
      #                                               #
      #                    STUDIO                     #
      #                                               #
      #################################################

      - type: grid
        title: Studio
        view_layout:
          grid-area: studio
        columns: 1
        cards:

          - type: custom:swipe-card
            start_card: 1
            parameters:
              roundLengths: true
              effect: coverflow
              speed: 650
              spaceBetween: 20
              threshold: 7
              coverflowEffect:
                rotate: 80
                depth: 300
            cards:

              - type: grid
                columns: 2
                cards:

                  - type: custom:button-card
                    entity: light.ikea_lamp_light
                    name: Ikea Lamp
                    template:
                      - light
                      - icon_shade
                      #- swiper_title

                  # - type: custom:button-card
                  #   entity: light.bslamp1_cloud_437725
                  #   name: Desk Lamp
                  #   template:
                  #     - light
                  #     - icon_recessed

                  - type: custom:button-card
                    entity: switch.led_strip_switch
                    name: LED
                    template:
                      - base
                      #- icon_ceiling_dining
                      #- icon_light_flush
                      #- icon_downlight_kitchen
                      #- icon_light_flush
                      #icon_contact_sensor

                  - type: custom:button-card
                    entity: device_tracker.desktop_cd40kgt_2 
                    name: Laptop L.
                    tap_action: toggle switch.wake_on_lan 
                    double_tap_action: !include popup/desktop_spectre.yaml
                    template:
                      - base_pc
                      - icon_win_pc
                      - circle
                      - loader
                    variables:
                      circle_input: >
                        [[[
                          let battery = states['sensor.spectre_battery_charge_remaining_percentage'];
                          if (battery) return parseInt(battery.state);
                        ]]]
                      circle_input_unit: "%"
                      # circle_input: >
                      #   [[[
                      #     let battery = states['sensor.spectre_battery_charge_remaining_percentage'];
                      #     if (battery) {
                      #       let batteryLevel = parseInt(battery.state);
                      #       return {
                      #         value: batteryLevel,
                      #         color: batteryLevel < 40 ? 'red' : 'var(--primary-text-color)',
                      #         style: batteryLevel < 40 ? 'font-weight: bold;' : ''
                      #       }
                      #     }
                      #   ]]]
                      # circle_input_unit: "%"
                      
                      
                         #sensor.w11_currentvolume
                      #   [[[
                      #     if (states["entityname_battery"].state > 40) {
                      #       let input = states["entityname_battery"].state / 3,
                      #         state = states["entityname_battery"].state,
                      #         color = '#08ff4e';
                      #       return `
                  - type: custom:button-card
                    entity: device_tracker.desktop_030ipd1 #sensor.desktop_030ipd1_audio_default_device_volume
                    name:  Laptop T.
                    #tap_action: toggle button.w11_mediaplaypause
                    double_tap_action: !include popup/studio_monitorer_tanya.yaml
                    # variables:
                    #   retain: sensor.desktop_030ipd1_last_changed
                    template:
                      - base_pc
                      - icon_win_pc
                      - circle
                      - loader
                    variables:
                      circle_input: >
                        [[[
                          let home = states['sensor.envy_battery_charge_remaining_percentage'];
                          if (home) return parseInt(home.state);
                        ]]]
                      circle_input_unit: "%"

          # - type: custom:button-card
          #   entity: person.tanya
          #   name: Tanya
          #   triggers_update:
          #     - sensor.tanya_last_changed
          #   double_tap_action: !include popup/home_tanya.yaml
          #   variables:
          #     retain: sensor.tanya_last_changed
          #   template:
          #     - person
          #     - circle


              - type: grid
                columns: 2
                cards:

                  - type: custom:button-card
                    entity: device_tracker.padawan_plex #sensor.plex_online
                    name: Plex
                    tap_action: none
                   # double_tap_action: !include popup/plex2.yaml    #plex.yaml tap_action: !include popup/footer_nas.yaml
                    template:
                      - base
                      - icon_plex_service
                    state_display: > #if (variables.state == '0 Issues') {
                      [[[
                        if (variables.state == 'home') {
                          return 'Online';
                        }
                      ]]]

                  - type: custom:button-card
                    entity: binary_sensor.pi_hole #binary_sensor.ping_rackstation
                    name: Pi-Hole
                    template:
                      - base
                      #- icon_synology_rs
                    # tap_action:
                    #   !include popup/rs_info.yaml
                  - type: custom:button-card
                    entity:  binary_sensor.pi_hole_backup #binary_sensor.ping_rackstation
                    name: Pi-Hole 2
                    template:
                      - base
                      #- icon_synology_rs
                    # tap_action:
                    #   !include popup/rs_info.yaml

                  - type: custom:button-card
                    entity: device_tracker.nr200p #binary_sensor.ping_diskstation
                    name: Server
                    template:
                      - base
                      - icon_synology_ds
                    # tap_action:
                    #   !include popup/ds_info.yaml

          # - type: custom:button-card
          #   entity: light.studio_desk_lamp
          #   name: Desktop Lamp
          #   template:
          #     - light
          #     #- icon_hue
          #     - icon_desk_lamp

          # - type: custom:button-card
          #   entity: light.studio_group
          #   name: Taklampor
          #   template:
          #     - light
          #     - icon_spot


              - type: grid
                columns: 1
                cards:
                  # - type: custom:button-card
                  #   entity: switch.led_strip
                  #   name: LED
                  #   template:
                  #     - light
                  #     - icon_silus_dome
                  #     #icon_contact_sensor

                  - type: custom:button-card
                    view_layout:
                      grid-area: seven
                    template:
                      - widgets
                    name: BATTERIES
                    styles:
                      name:
                        - font-size: 12PX #14px
                        - font-weight: bold
                        - top: 20px
                        - left: 20px
                        - position: absolute
                      custom_fields:
                        s7:
                          - top: 40px
                          - left: '-5px'
                          - width: 110%
                          - border-bottom: 1px solid rgb(255,255,255,0.1)
                          - padding: 10px
                          - position: absolute
                          - font-size: 16px
                          - text-shadow: 0px 0px 1px black
                        s7battery:
                          - top: 60px
                          - right: 15px
                          - position: absolute
                          - font-size: 14px
                        tempsensor:
                          - top: 100px
                          - left: '-5px'
                          - width: 110%
                          - border-bottom: 1px solid rgb(255,255,255,0.1)
                          - padding: 10px
                          - position: absolute
                          - font-size: 16px
                          - text-shadow: 0px 0px 1px black
                        tempsensorbattery:
                          - top: 120px
                          - right: 15px
                          - position: absolute
                          - font-size: 14px
                        motion:
                          - top: 160px
                          - left: '-5px'
                          - width: 110%
                          - border-bottom: 1px solid rgb(255,255,255,0.1)
                          - padding: 10px
                          - position: absolute
                          - font-size: 16px
                          - text-shadow: 0px 0px 1px black
                        motionbattery:
                          - top: 180px
                          - right: 15px
                          - position: absolute
                          - font-size: 14px
                        door:
                          - top: 220px
                          - left: '-5px'
                          - width: 110%
                          - border-bottom: 1px solid rgb(255,255,255,0.1)
                          - padding: 10px
                          - position: absolute
                          - font-size: 16px
                          - text-shadow: 0px 0px 1px black
                        doorbattery:
                          - top: 240px
                          - right: 15px
                          - position: absolute
                          - font-size: 14px
                    custom_fields:
                      s7: |
                        [[[
                              return `<div align="left"> <ha-icon
                                icon="mdi:cellphone"
                                style="width: 20px; height: 20px; color:grey; padding: 10px;">
                                </ha-icon>S7</div>`
                            ]]]
                      s7battery: |
                        [[[
                          if (states["sensor.s7_edge_battery_level"].state > 40) {
                            let input = states["sensor.s7_edge_battery_level"].state / 3,
                              state = states["sensor.s7_edge_battery_level"].state,
                              color = '#08ff4e';
                            return `
                              <svg width="86" height="24">
                                <rect x="40" y="1" rx="5" ry="5" width="40" height="18" stroke="gray" fill="transparent" stroke-width="2"/>
                                <rect x="43" y="4" rx="3" ry="3" width="${input}" height="12" fill="${color}" stroke-width="0"/>
                                <rect x="82" y="6" rx="2" ry="2" width="2" height="9" fill="grey" stroke-width="0"/>
                            `;
                          } if (states["sensor.s7_edge_battery_level"].state > 15) {
                            let input = states["sensor.s7_edge_battery_level"].state / 3,
                              state = states["sensor.s7_edge_battery_level"].state,
                              color = 'orange';
                            return `
                              <svg width="86" height="24">
                                <rect x="40" y="1" rx="5" ry="5" width="40" height="18" stroke="gray" fill="transparent" stroke-width="2"/>
                                <rect x="43" y="4" rx="3" ry="3" width="${input}" height="12" fill="${color}" stroke-width="0"/>
                                <rect x="82" y="6" rx="2" ry="2" width="2" height="9" fill="grey" stroke-width="0"/>
                            `;
                          } else {
                            let state = states["sensor.s7_edge_battery_level"].state,
                              color = 'red';
                            return `
                              <svg width="86" height="24">
                                <rect x="40" y="1" rx="5" ry="5" width="40" height="18" stroke="gray" fill="transparent" stroke-width="2"/>
                                <rect x="43" y="4" rx="3" ry="3" width="5" height="12" fill="${color}" stroke-width="0"/>
                                <rect x="82" y="6" rx="2" ry="2" width="2" height="9" fill="grey" stroke-width="0"/>
                            `;
                          }
                        ]]]
                      tempsensor: |
                        [[[
                              return `<div align="left"> <ha-icon
                                icon="mdi:cellphone"
                                style="width: 20px; height: 20px; color:grey; padding: 10px;">
                                </ha-icon>Lumi Bed</div>`
                            ]]]
                      tempsensorbattery: |
                        [[[
                          if (states["sensor.lumi_lumi_weather_battery"].state > 40) {
                            let input = states["sensor.lumi_lumi_weather_battery"].state / 3,
                              state = states["sensor.lumi_lumi_weather_battery"].state,
                              color = '#08ff4e';
                            return `
                              <svg width="86" height="24">
                                <rect x="40" y="1" rx="5" ry="5" width="40" height="18" stroke="gray" fill="transparent" stroke-width="2"/>
                                <rect x="43" y="4" rx="3" ry="3" width="${input}" height="12" fill="${color}" stroke-width="0"/>
                                <rect x="82" y="6" rx="2" ry="2" width="2" height="9" fill="grey" stroke-width="0"/>
                            `;
                          } if (states["sensor.lumi_lumi_weather_battery"].state > 15) {
                            let input = states["sensor.lumi_lumi_weather_battery"].state / 3,
                              state = states["sensor.lumi_lumi_weather_battery"].state,
                              color = 'orange';
                            return `
                              <svg width="86" height="24">
                                <rect x="40" y="1" rx="5" ry="5" width="40" height="18" stroke="gray" fill="transparent" stroke-width="2"/>
                                <rect x="43" y="4" rx="3" ry="3" width="${input}" height="12" fill="${color}" stroke-width="0"/>
                                <rect x="82" y="6" rx="2" ry="2" width="2" height="9" fill="grey" stroke-width="0"/>

                            `;
                          } else {
                            let state = states["sensor.lumi_lumi_weather_battery"].state,
                              color = 'red';
                            return `
                              <svg width="86" height="24">
                                <rect x="40" y="1" rx="5" ry="5" width="40" height="18" stroke="gray" fill="transparent" stroke-width="2"/>
                                <rect x="43" y="4" rx="3" ry="3" width="5" height="12" fill="${color}" stroke-width="0"/>
                                <rect x="82" y="6" rx="2" ry="2" width="2" height="9" fill="grey" stroke-width="0"/>
                            `;
                          }
                        ]]]
                      motion: |
                        [[[
                              return `<div align="left"> <ha-icon
                                icon="mdi:tablet"
                                style="width: 20px; height: 20px; color:grey; padding: 10px;">
                                </ha-icon>Hallway</div>`
                            ]]]
                      motionbattery: |
                        [[[
                          if (states["sensor.samjin_motion_temperature"].state > 40) {
                            let input = states["sensor.samjin_motion_temperature"].state / 3,
                              state = states["sensor.samjin_motion_temperature"].state,
                              color = '#08ff4e';
                            return `
                              <svg width="86" height="24">
                                <rect x="40" y="1" rx="5" ry="5" width="40" height="18" stroke="gray" fill="transparent" stroke-width="2"/>
                                <rect x="43" y="4" rx="3" ry="3" width="${input}" height="12" fill="${color}" stroke-width="0"/>
                                <rect x="82" y="6" rx="2" ry="2" width="2" height="9" fill="grey" stroke-width="0"/>
                            `;
                          } if (states["sensor.samjin_motion_temperature"].state > 15) {
                            let input = states["sensor.samjin_motion_temperature"].state / 3,
                              state = states["sensor.samjin_motion_temperature"].state,
                              color = 'orange';
                            return `
                              <svg width="86" height="24">
                                <rect x="40" y="1" rx="5" ry="5" width="40" height="18" stroke="gray" fill="transparent" stroke-width="2"/>
                                <rect x="43" y="4" rx="3" ry="3" width="${input}" height="12" fill="${color}" stroke-width="0"/>
                                <rect x="82" y="6" rx="2" ry="2" width="2" height="9" fill="grey" stroke-width="0"/>
                            `;
                          } else {
                            let state = states["sensor.samjin_motion_temperature"].state,
                              color = 'red';
                            return `
                              <svg width="86" height="24">
                                <rect x="40" y="1" rx="5" ry="5" width="40" height="18" stroke="gray" fill="transparent" stroke-width="2"/>
                                <rect x="43" y="4" rx="3" ry="3" width="5" height="12" fill="${color}" stroke-width="0"/>
                                <rect x="82" y="6" rx="2" ry="2" width="2" height="9" fill="grey" stroke-width="0"/>
                            `;
                          }
                        ]]]
                      door: |
                        [[[
                              return `<div align="left"> <ha-icon
                                icon="mdi:tablet"
                                style="width: 20px; height: 20px; color:grey; padding: 10px;">
                                </ha-icon>Door</div>`
                            ]]]
                      doorbattery: |
                        [[[
                          if (states["sensor.samjin_multi_battery"].state > 40) {
                            let input = states["sensor.samjin_multi_battery"].state / 3,
                              state = states["sensor.samjin_multi_battery"].state,
                              color = '#08ff4e';
                            return `
                              <svg width="86" height="24">
                                <rect x="40" y="1" rx="5" ry="5" width="40" height="18" stroke="gray" fill="transparent" stroke-width="2"/>
                                <rect x="43" y="4" rx="3" ry="3" width="${input}" height="12" fill="${color}" stroke-width="0"/>
                                <rect x="82" y="6" rx="2" ry="2" width="2" height="9" fill="grey" stroke-width="0"/>
                            `;
                          } if (states["sensor.samjin_multi_battery"].state > 15) {
                            let input = states["sensor.samjin_multi_battery"].state / 3,
                              state = states["sensor.samjin_multi_battery"].state,
                              color = 'orange';
                            return `
                              <svg width="86" height="24">
                                <rect x="40" y="1" rx="5" ry="5" width="40" height="18" stroke="gray" fill="transparent" stroke-width="2"/>
                                <rect x="43" y="4" rx="3" ry="3" width="${input}" height="12" fill="${color}" stroke-width="0"/>
                                <rect x="82" y="6" rx="2" ry="2" width="2" height="9" fill="grey" stroke-width="0"/>
                            `;
                          } else {
                            let state = states["sensor.samjin_multi_battery"].state,
                              color = 'red';
                            return `
                              <svg width="86" height="24">
                                <rect x="40" y="1" rx="5" ry="5" width="40" height="18" stroke="gray" fill="transparent" stroke-width="2"/>
                                <rect x="43" y="4" rx="3" ry="3" width="5" height="12" fill="${color}" stroke-width="0"/>
                                <rect x="82" y="6" rx="2" ry="2" width="2" height="9" fill="grey" stroke-width="0"/>
                            `;
                          }
                        ]]]
                      # entityname: |
                      #   [[[
                      #         return `<div align="left"> <ha-icon
                      #           icon="mdi:tablet"
                      #           style="width: 20px; height: 20px; color:grey; padding: 10px;">
                      #           </ha-icon>Entityname</div>`
                      #       ]]]
                      # entitynamebattery: |
                      #   [[[
                      #     if (states["entityname_battery"].state > 40) {
                      #       let input = states["entityname_battery"].state / 3,
                      #         state = states["entityname_battery"].state,
                      #         color = '#08ff4e';
                      #       return `
                      #         <svg width="86" height="24">
                      #           <rect x="40" y="1" rx="5" ry="5" width="40" height="18" stroke="gray" fill="transparent" stroke-width="2"/>
                      #           <rect x="43" y="4" rx="3" ry="3" width="${input}" height="12" fill="${color}" stroke-width="0"/>
                      #           <rect x="82" y="6" rx="2" ry="2" width="2" height="9" fill="grey" stroke-width="0"/>
                      #       `;
                      #     } if (states["entityname_battery"].state > 15) {
                      #       let input = states["entityname_battery"].state / 3,
                      #         state = states["entityname_battery"].state,
                      #         color = 'orange';
                      #       return `
                      #         <svg width="86" height="24">
                      #           <rect x="40" y="1" rx="5" ry="5" width="40" height="18" stroke="gray" fill="transparent" stroke-width="2"/>
                      #           <rect x="43" y="4" rx="3" ry="3" width="${input}" height="12" fill="${color}" stroke-width="0"/>
                      #           <rect x="82" y="6" rx="2" ry="2" width="2" height="9" fill="grey" stroke-width="0"/>
                      #       `;
                      #     } else {
                      #       let state = states["entityname_battery"].state,
                      #         color = 'red';
                      #       return `
                      #         <svg width="86" height="24">
                      #           <rect x="40" y="1" rx="5" ry="5" width="40" height="18" stroke="gray" fill="transparent" stroke-width="2"/>
                      #           <rect x="43" y="4" rx="3" ry="3" width="5" height="12" fill="${color}" stroke-width="0"/>
                      #           <rect x="82" y="6" rx="2" ry="2" width="2" height="9" fill="grey" stroke-width="0"/>
                      #       `;
                      #     }
                      #   ]]]
                      # entityname: |
                      #   [[[
                      #         return `<div align="left"> <ha-icon
                      #           icon="mdi:tablet"
                      #           style="width: 20px; height: 20px; color:grey; padding: 10px;">
                      #           </ha-icon>Entityname</div>`
                      #       ]]]
                      # entitynamebattery: |
                      #   [[[
                      #     if (states["entityname_battery"].state > 40) {
                      #       let input = states["entityname_battery"].state / 3,
                      #         state = states["entityname_battery"].state,
                      #         color = '#08ff4e';
                      #       return `
                      #         <svg width="86" height="24">
                      #           <rect x="40" y="1" rx="5" ry="5" width="40" height="18" stroke="gray" fill="transparent" stroke-width="2"/>
                      #           <rect x="43" y="4" rx="3" ry="3" width="${input}" height="12" fill="${color}" stroke-width="0"/>
                      #           <rect x="82" y="6" rx="2" ry="2" width="2" height="9" fill="grey" stroke-width="0"/>
                      #       `;
                      #     } if (states["entityname_battery"].state > 15) {
                      #       let input = states["entityname_battery"].state / 3,
                      #         state = states["entityname_battery"].state,
                      #         color = 'orange';
                      #       return `
                      #         <svg width="86" height="24">
                      #           <rect x="40" y="1" rx="5" ry="5" width="40" height="18" stroke="gray" fill="transparent" stroke-width="2"/>
                      #           <rect x="43" y="4" rx="3" ry="3" width="${input}" height="12" fill="${color}" stroke-width="0"/>
                      #           <rect x="82" y="6" rx="2" ry="2" width="2" height="9" fill="grey" stroke-width="0"/>
                      #       `;
                      #     } else {
                      #       let state = states["entityname_battery"].state,
                      #         color = 'red';
                      #       return `
                      #         <svg width="86" height="24">
                      #           <rect x="40" y="1" rx="5" ry="5" width="40" height="18" stroke="gray" fill="transparent" stroke-width="2"/>
                      #           <rect x="43" y="4" rx="3" ry="3" width="5" height="12" fill="${color}" stroke-width="0"/>
                      #           <rect x="82" y="6" rx="2" ry="2" width="2" height="9" fill="grey" stroke-width="0"/>
                      #       `;
                      #     }
                      #   ]]]


          # - type: custom:button-card
          #   entity: weather.pirateweather
          #   name: Hvittingfoss
          #   tap_action: !include popup/weather.yaml
          #   template:
          #     - base
          #     # - weather_forecast
          #   # variables:
          #   #   temp_min: sensor.weather_min_temp
          #   #   temp_max: sensor.weather_max_temp

          # - type: custom:button-card
          #   entity: switch.imac
          #   name: Dator
          #   double_tap_action: !include popup/studio_dator.yaml
          #   template:
          #     - base
          #     - icon_imac
          #     - loader
          #     - lock
          #   variables:
          #     lock: >
          #       [[[
          #         let lock = states['input_boolean.imac_lock'];
          #         return !lock || lock.state;
          #       ]]]
          #     trigger: >
          #       [[[
          #         let trigger = states['script.home_leave'];
          #         return !trigger || trigger;
          #       ]]]

      # - type: grid
      #   title: Studio
      #   view_layout:
      #     grid-area: studio
      #   columns: 2
      #   cards:

      #     - type: custom:button-card
      #       entity: light.studio_dator
      #       name: Datorlampa
      #       template:
      #         - light
      #         - icon_hue

      #     - type: custom:button-card
      #       entity: light.studio_group
      #       name: Taklampor
      #       template:
      #         - light
      #         - icon_spot

      #     - type: custom:button-card
      #       entity: switch.imac
      #       name: Dator
      #       double_tap_action:
      #         !include popup/studio_dator.yaml
      #       template:
      #         - base
      #         - icon_imac
      #         - loader
      #         - lock
      #       variables:
      #         lock: >
      #           [[[
      #             let lock = states['input_boolean.imac_lock'];
      #             return !lock || lock.state;
      #           ]]]
      #         trigger: >
      #           [[[
      #             let trigger = states['script.home_leave'];
      #             return !trigger || trigger;
      #           ]]]

      #     - type: custom:button-card
      #       entity: switch.gosund_monitors_switch
      #       name: Monitorer
      #       double_tap_action:
      #         !include popup/studio_monitorer.yaml
      #       template:
      #         - base
      #         - icon_monitors
      #         - circle
      #         - loader
      #       variables:
      #         circle_input: >
      #           [[[
      #             let volume = states['sensor.monitors_volume'];
      #             if (volume) return parseInt(volume.state);
      #           ]]]
      #         circle_input_unit: '%'

      #################################################
      #                                               #
      #                    SOVRUM                     #
      #                                               #
      #################################################

      - type: grid
        title: Bedroom
        view_layout:
          grid-area: sovrum
        columns: 2
        cards:
          #     # - type: custom:button-card
          #     #   entity: light.sovrum_group
          #     #   name: Sänglampor
          #     #   template:
          #     #     - light
          #     #     - icon_lamp

          - type: custom:button-card
            entity: sensor.lumi_lumi_weather_temperature #sensor.thermal_comfort_summer_simmer_perception #sensor.thermal_comfort_simmerzone
            name: Temp #[[[ return states.['sensor.thermal_comfort_summer_simmer_perception'].state ]]]
            tap_action: none
            double_tap_action: !include popup/thermal_comfort.yaml
            template:
              - base
              #- climate_base
              #- media
              - icon_climate
              #- extra_styles
              - circle
            variables:
              circle_input: >
                [[[
                  let humidity = states['sensor.lumi_lumi_weather_humidity'];
                  if (humidity) return parseInt(humidity.state);
                ]]]
              circle_input_unit: "%"
            # variables:
            #   circle_input: >
            #     [[[
            #       let volume = states['sensor.spectre_battery_charge_remaining_percentage'];
            #       if (volume) return parseInt(volume.state);
            #     ]]]
            #   circle_input_unit: "%"
#                [[[
#                  if (entity) {
#                      return entity.state == 'slightly_cool'
#                          ? Math.round(entity.attributes.temperature).toString()
#                          : Math.round(entity.attributes.current_temperature).toString();
#                  }
#                ]]]
            

          # - type: custom:button-card
          #   entity: switch.ps5_635_power
          #   name: Playstation
          #   double_tap_action: !include popup/sovrum_playstation.yaml
          #   template:
          #     - base
          #     - icon_ps5
          #     - loader

          - type: custom:button-card
            entity: switch.bedroom_switch #media_player.bedroom_tv
            name: "Tv\u00B2"
            double_tap_action: !include popup/sovrum_tv2.yaml
            template:
              - base
              - icon_tv
              - loader

          - type: custom:button-card
            entity: light.philips_1746547p7_huelight
            name: Hue
            template:
              - light
              - icon_recessed

          - type: custom:button-card
            entity: weather.pirateweather
            name: Horsens
            # tap_action:
            #   !include popup/weather.yaml
            template:
              - base
              #- base_saga
              #- extra_styles_saga
              - weather_forecast
              #- weather_forecast_trial
            variables:
              temp_min: sensor.weather_min_temp
              temp_max: sensor.weather_max_temp
              precip: sensor.weather_precipitation_probability
              current_weather: weather.pirateweather #sensor.pirateweather_hourly_summary

      #################################################
      #                                               #
      #                     MEDIA                     #
      #                                               #
      #################################################

      - type: grid
        title: Media
        view_layout:
          grid-area: media
        columns: 1
        cards:

          - type: custom:swipe-card
            parameters:
              speed: 550
              spaceBetween: 40
              threshold: 5
            cards:

              - type: horizontal-stack
                cards:

                  - type: conditional
                    conditions:
                      
                      - entity: select.conditional_media
                        state_not: Recently Added (Offline)
                      - entity: select.conditional_media
                        state_not: Samsung
                      - entity: select.conditional_media
                        state_not: Plex (Plex for Samsung - TV 2018)
                      - entity: select.conditional_media
                        state_not: Plex (Plex Cast - Chromecast)
                      # - entity: select.conditional_media
                      #   state_not: Spotify
                      - entity: select.conditional_media
                        state_not: Tv²
                      - entity: select.conditional_media
                        state_not: NODE-8ADC
                      # - entity: select.conditional_media
                      #   state_not: Plex (Plex for Windows - DESKTOP-030IPD1)
                      - entity: select.conditional_media
                        state_not: Plex (Plex for Windows - DESKTOP-CD40KGT)



                    card:
                      type: custom:button-card
                      entity: sensor.plex_recently_added
                      name: Last added
                      tap_action:
                        action: none
                      template:
                        - conditional_media
                        - icon_plex


                    # RECENTLY ADDED (BACKUP)
                  - type: conditional
                    conditions:
                      - entity: select.conditional_media
                        state: Recently Added (Offline)
                    card:
                      type: custom:button-card
                      entity: sensor.recently_added_offline
                      name: Recently Added (Offline)
                      template:
                        - conditional_media
                        - icon_plex

                  - type: conditional
                    conditions:
                      - entity: select.conditional_media
                        state: Samsung
                    card:
                      type: custom:button-card
                      entity: media_player.samsung_55
                      #triggers_update: media_player.samsung_55
                      template:
                        - conditional_media
                        - media_volume
                        #- icon_tv
                        - progress_bar
                      variables:
                        entity_picture: sensor.active_media_players
                        volume_control: media_player.node_8adc
                      triggers_update:
                        - sensor.active_media_players

                  - type: conditional
                    conditions:
                      - entity: select.conditional_media
                        state: Plex (Plex for Samsung - TV 2018)
                    card:
                      type: custom:button-card
                      entity: media_player.plex_plex_for_samsung_tv_2018
                      triggers_update: media_player.plex_plex_for_samsung_tv_2018
                      name: Plex
                      template:
                        - conditional_media
                        # - media_volume
                        #- icon_plex
                        - progress_bar
                      
                  
                  - type: conditional
                    conditions:
                      - entity: select.conditional_media
                        state: Plex (Plex Cast - Chromecast)
                    card:
                      type: custom:button-card
                      entity: media_player.plex_plex_cast_chromecast
                      triggers_update: media_player.plex_plex_cast_chromecast
                      template:
                        - conditional_media
                        #- icon_plex
                        - progress_bar
                  
                  # - type: conditional
                  #   conditions:
                  #     - entity: select.conditional_media
                  #       state: Spotify
                  #   card:
                  #     type: custom:button-card
                  #     entity: media_player.spotify
                  #     template:
                  #       - conditional_media
                  #       #- icon_spotify
                  #       - progress_bar

                  - type: conditional
                    conditions:
                      - entity: select.conditional_media
                        state: Tv²
                    card:
                      type: custom:button-card
                      entity: media_player.bedroom_tv
                      template:
                        - conditional_media
                        #- icon_tv
                        - progress_bar

                  - type: conditional
                    conditions:
                      - entity: select.conditional_media
                        state: NODE-8ADC
                    card:
                      type: custom:button-card
                      entity: media_player.node_8adc
                      template:
                        - conditional_media
                        - progress_bar
                  #       - icon_nest_mini
                        #- icon_amp

                  # - type: conditional
                  #   conditions:
                  #     - entity: select.conditional_media
                  #       state: Plex (Plex for Windows - DESKTOP-030IPD1)
                  #   card:
                  #     type: custom:button-card
                  #     entity: media_player.plex_plex_for_windows_desktop_030ipd1
                  #     template:
                  #       - conditional_media
                  #       #- icon_plex
                  #       - progress_bar

                  - type: conditional
                    conditions:
                      - entity: select.conditional_media
                        state: Plex (Plex for Windows - DESKTOP-CD40KGT)
                    card:
                      type: custom:button-card
                      entity: media_player.plex_plex_for_windows_desktop_cd40kgt
                      template:
                        - conditional_media
                        #- icon_plex
                        - progress_bar
 
###################################
###### SWIPE CARD - 2nd PAGE ######
###################################

              - type: grid
                columns: 2
                cards:

                  - type: custom:button-card
                    entity: media_player.samsung_55
                    triggers_update: media_player.samsung_55 #sensor.youtube_watching
                    name: Samsung #Living Room
                    template:
                      - media
                      - samsung_tv
                      - media_volume
                      - icon_tv

                  - type: custom:button-card
                    entity: media_player.bedroom_tv
                    triggers_update: media_player.bedroom_tv #sensor.youtube_watching
                    name: Bedroom
                    template:
                      - media
                      - icon_tv

                  - type: custom:button-card
                    entity: media_player.spotify_lulu
                    name: Spotify
                    template:
                      - media
                      - icon_spotify

                  - type: custom:button-card
                    entity: media_player.node_8adc
                    #name: Bluesound Node 2i
                    template:
                      - media
                      #- icon_nest_mini
                      #- icon_denon_pma
                      #- icon_receiver
                      - icon_amp

###################################
###### SWIPE CARD - 3nd PAGE ######
###################################


              - type: grid
                columns: 2
                cards:

                    - type: custom:button-card
                      entity: media_player.plex_plex_for_samsung_tv_2018
                      name: TV
                      template:
                        - media
                        - progress_bar
                        - icon_tv

                    - type: custom:button-card
                      entity: media_player.plex_plex_for_windows_desktop_cd40kgt
                      name: Lulu
                      template:
                        - media
                        - icon_win_pc

                    - type: custom:button-card
                      entity: media_player.plex_plex_for_windows_desktop_030ipd1
                      name: Tanya
                      template:
                        - media
                        - icon_win_pc

                    - type: custom:button-card
                      entity: media_player.plex_plex_cast_chromecast
                      name: Chromecast
                      template:
                        - media
                       # - icon_win_pc

      #################################################
      #                                               #
      #              OTHER      ÖVRIGT                #
      #                                               #
      #################################################

      - type: grid
        title: Other
        view_layout:
          grid-area: övrigt
        columns: 1

        cards:
          - type: custom:swipe-card
            parameters:
              speed: 550
              spaceBetween: 40
              threshold: 5
            cards:
              - type: horizontal-stack
                cards:
                  - type: conditional
                    conditions:
                      - entity: select.conditional_media_camera
                        state_not: Vardagsrum #Living room

                      # - entity: select.conditional_media_camera
                      #   state_not: Sovrum #Bedroom

                      # - entity: select.conditional_media_camera
                      #   state_not: Spotify

                      # - entity: select.conditional_media_camera
                      #   state_not: Kök #Kitchen
                    card:
                      # type: custom:button-card
                      # entity: camera.g3_instant_high
                      # name: Last motion
                      # tap_action: !include popup/other_security.yaml
                      # template:
                      #   - conditional_media_camera
                      #   #- icon_unifi_cam

                      type: custom:button-card
                      entity: camera.g3_instant_high
                      name: >
                        [[[
                          if (variables.state == 'recording') {
                            return 'Online';
                          }
                        ]]]

#                        [[[ return variables.state; ]]]
                      template:
                        #- base
                        - media
                        - icon_unifi_cam
                      # hold_action:
                      #   !include popup/other_security.yaml #!include popup/cameras.yaml
                      # tap_action:
                      #   !include popup/cameras.yaml
                      #state_display: >


                  #      [[[ return variables.state['sensor.g3_instant_last_motion_detected.last_changed']; ]]]
                  #     [[[ return relative_time['states.sensor.g3_instant_last_motion_detected.last_changed']; ]]]
                  #     states['sensor.g3_instant_last_motion_detected']
                  # {% set time =  relative_time(states.sensor.g3_instant_last_motion_detected.last_changed) %}
                  #  Last motion: {{ time }}


# {% if is_state('camera.g3_instant_high', 'recording') and is_state('binary_sensor.g3_instant_motion' , "off") %}
# No Motion Detected for {{ relative_time(states.sensor.g3_instant_last_motion_detected.last_changed) }}
# {% elif is_state('camera.g3_instant_high', 'recording') and is_state('binary_sensor.g3_instant_motion' , "on") %}
#   {{-'\u26A0\uFE0F'}} mdi:motion-play 🏠 <b><font color='#6a7377'>Motion Detected</font></b>
# {% else %} {{-'\u26A0\uFE0F'}}<b><font color='#6a7377'>Camera is Offline</font></b>
# {% endif %}

# state_display: >
#


#                         {% if is_state('camera.g3_instant_high', 'recording') and is_state('binary_sensor.g3_instant_motion' , "off") %}
#                             No Motion Detected for {{ relative_time(states.sensor.g3_instant_last_motion_detected.last_changed) }}
#                         {% elif is_state('camera.g3_instant_high', 'recording') and is_state('binary_sensor.g3_instant_motion' , "on") %}
#                            {{-'\u26A0\uFE0F'}}  🏠 <b><font color='#6a7377'>Motion Detected</font></b>
#                         {% else %} {{-'\u26A0\uFE0F'}}<b><font color='#6a7377'>Camera is Offline</font></b>
#                         {% endif %}

###################################
###### SWIPE CARD - 2nd PAGE ######
###################################

              - type: grid
                columns: 2
                cards:

                  # - type: custom:button-card
                  #   entity: light.kitchen_led_switch
                  #   name: Christmas Tree #Kitchen LED
                  #   template:
                  #     - light
                  #     #- icon_silus_dome
                  #     - icon_superman

                  # - type: custom:button-card
                  #   entity: switch.living_room_radio
                  #   name: "Speakers"
                  #   #double_tap_action: !include popup/sovrum_tv2.yaml
                  #   template:
                  #     - base
                  #     - icon_tv
                  #     - loader


                  # - type: custom:button-card
                  #   entity: switch.living_room_radio
                  #   name: Speakers
                  #   double_tap_action: !include popup/studio_monitorer.yaml
                  #   template:
                  #     - base
                  #     - icon_monitors
                  #     - circle
                  #     - loader
                  #   variables:
                  #     circle_input: >
                  #       {{ state_attr('media_player.node_8adc','volume_level') }}
                  #     circle_input_unit: "%"

                  - type: custom:button-card
                    entity: switch.radio_switch #sensor.w11_audio_audio_sessions #switch.gosund_monitors_switch
                    name: Speakers #📺
                    #tap_action: toggle button.w11_mediaplaypause
                    double_tap_action: !include popup/studio_monitorer_radio.yaml
                    template:
                      #- media
                      - base
                      - icon_monitors
                      #- circle
                      - loader
                    # variables: ### let volume = states['sensor.w11_currentvolume'];
                    #   circle_input: >
                    #    {{ state_attr("media_player.node_8adc", "volume_level") *100 }}
                    #   circle_input_unit: "%"

                      # [[[
                        #   let volume = states['media_player.node_8adc'];
                        #   if (volume) return parseInt(volume.state);
                        # ]]]

                  - type: custom:button-card
                    entity: switch.subwoofer_switch
                    name: "Subwoofer"
                    #double_tap_action: !include popup/sovrum_tv2.yaml
                    template:
                      - base
                      - icon_sub
                      - loader

                  # - type: custom:button-card
                  #   entity: switch.
                  #   name: Kitchen Led #Balcony
                  #   template:
                  #     - light
                  #     - icon_hue_fair
                  #     #- icon_porch
                  #     - circle
                  #     - loader

                  - type: custom:button-card
                    entity: switch.balcony_switch
                    name: Outdoor
                    template:
                      - base
                      #- icon_silus_dome
                      - icon_porch
                      - loader

                  - type: custom:button-card
                    entity: light.kitchen_led_switch
                    name: Kitchen
                    template:
                      - base
                      - icon_hue_fair
                      #- icon_porch
                      - loader




###################################
###### SWIPE CARD - 3rd PAGE ######
###################################


              # - type: grid
              #   columns: 2
              #   cards:



      # - type: custom:button-card
      #   entity: light.balcony
      #   name: Balcony
      #   double_tap_action: !include popup/living_room_balcony.yaml
      #   template:
      #     - light
      #     #- icon_spot
      #     - icon_porch

      #     - type: custom:button-card
      #       entity: light.badrum_group
      #       name: Badrum
      #       template:
      #         - light
      #         - icon_bathroom

      #     - type: custom:button-card
      #       entity: switch.gosund_fan_switch
      #       name: "Fläkt\u00B2"
      #       double_tap_action:
      #         !include popup/studio_flakt.yaml
      #       template:
      #         - base
      #         - icon_fan2
      #         - loader

      #     - type: custom:button-card
      #       entity: light.garderob_lampa
      #       name: Garderob
      #       template:
      #         - light
      #         - icon_closet

      #     - type: custom:button-card
      #       entity: light.hall_group
      #       name: Hall
      #       template:
      #         - light
      #         - icon_spot

      #################################################
      #                                               #   ALSO CHECK AND ADD THIS TIMER THING
      #                     HEMMA                     #   https://community.home-assistant.io/t/a-different-take-on-designing-a-lovelace-ui/162594/4249
      #                                               #
      #################################################

      - type: grid
        title: Home
        view_layout:
          grid-area: hemma
        columns: 2
        cards:

          - type: custom:button-card
            entity: person.lulu
            name: Lulu
            triggers_update:
              - sensor.lulu_last_changed
            double_tap_action:
              !include popup/home_lulu.yaml
            variables:
              retain: sensor.lulu_last_changed
            template:
              - person
              #- media
              - circle

          - type: custom:button-card
            entity: person.tanya
            name: Tanya
            triggers_update:
              - sensor.tanya_last_changed
            double_tap_action:
              !include popup/home_tanya.yaml
            variables:
              retain: sensor.tanya_last_changed
            template:
              - person
              #- media
              - circle

          - type: custom:button-card
            entity: script.home_leave
            name: All Off
            template:
              - base
              - icon_away

          - type: custom:button-card
            entity: script.home_arrive
            name: Home
            template:
              - base
              - icon_home

      #################################################
      #                                               #
      #                    FOOTER                     #
      #                                               #
      #################################################

      - type: horizontal-stack
        view_layout:
          grid-area: footer
        cards:

          - type: custom:button-card
            name: >
              <ha-icon icon="mdi:nas"></ha-icon> NAS
            tap_action:
              !include popup/footer_nas.yaml
            triggers_update:
              - update.nas_dsm_update
              - sensor.nas_volume_1_status
              - binary_sensor.nas_security_status
              - sensor.disk_use_percent
            variables:
              notify: >
                [[[
                  let id = this._config.triggers_update;
                  if (id.every(e => states[e]))
                      return states[id[0]].state === 'on'
                          ? 1
                          : states[id[1]].state === 'background_scrubbing' ||
                            states[id[2]].state === 'on' ||
                            parseFloat(states[id[3]].state) >= 85;
                ]]]
            template: footer

          - type: custom:button-card
            entity: sensor.template_updates
            name: >
              <ha-icon icon="mdi:arrow-up-bold-circle-outline"></ha-icon> Updates
            tap_action:
              !include popup/footer_updates.yaml
            variables:
              notify: >
                [[[
                  return parseInt(entity?.state);
                ]]]
            template: footer

          # - type: custom:button-card
          #   name: >
          #     <ha-icon icon="mdi:robot-vacuum-variant"></ha-icon> Clean
          #   tap_action:
          #     !include popup/footer_vacuum.yaml
          #   triggers_update:
          #     - sensor.date
          #   variables:
          #     notify: >
          #       [[[
          #         let id = states['sensor.morty_last_clean_end'];
          #         if (id) return (Date.now() - Date.parse(id.state)) > 6048e5;
          #       ]]]
          #   template: footer

          - type: custom:button-card
            name: >
              <ha-icon icon="mdi:chart-line-variant"></ha-icon> Historic
            tap_action:
              !include popup/footer_history.yaml
            template: footer

          - type: custom:button-card
            name: >
              <ha-icon icon="mdi:tablet"></ha-icon> Tablet
            tap_action:
              !include popup/footer_tablet.yaml
            variables:
              notify: >
                [[[
                  let id = states['binary_sensor.galaxy_tab_a_plugged_in'];
                  if (id) return id.state === 'off';
                ]]]
            template: footer

          - type: custom:button-card
            name: >
              <ha-icon icon="mdi:router-wireless"></ha-icon> Router
            tap_action:
              !include popup/footer_router.yaml
            triggers_update:
              - update.unifi_dream_machine
              - binary_sensor.template_udm_internet
            variables:
              notify: >
                [[[
                  let id = this._config.triggers_update;
                  if (id.every(e => states[e]))
                      return states[id[0]].state === 'on'
                          ? 1
                          : states[id[1]].state === 'off';
                ]]]
            template: footer

          - type: custom:button-card
            name: >
              <ha-icon icon="mdi:panorama-sphere-outline"></ha-icon> Sky++
            tap_action:
              !include popup/footer_sky.yaml
            triggers_update:
              - update.unifi_dream_machine
              - sensor.aurora_visibility_aurora_visibility
            variables:
              notify: >
                [[[
                  let id = this._config.triggers_update;
                  if (id.every(e => states[e]))
                      return states[id[0]].state === 'on'
                          ? 1
                          : states[id[1]].state === 'off';
                ]]]
            template: footer
